apiVersion: v1
kind: Service
metadata:
  name: nn
  labels:
    app: nn
spec:
  ports:
  - port: 50070
    name: http-address 
  - port: 9000
    name: fs-default-name
  clusterIP: None
  selector:
    app: nn
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: nn
spec:
  serviceName: nn
  replicas: 1
  template:
    metadata:
      labels:
        app: nn
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
        scheduler.alpha.kubernetes.io/affinity: >
            {
              "podAntiAffinity": {
                "requiredDuringSchedulingRequiredDuringExecution": [{
                  "labelSelector": {
                    "matchExpressions": [{
                      "key": "app",
                      "operator": "In",
                      "values": ["nn"]
                    }]
                  },
                  "topologyKey": "kubernetes.io/hostname"
                }]
              }
            }
    spec:
      containers:
      - name: nn
        imagePullPolicy: Always
        image: dckreg:5000/hdfs:2.5.1
        ports:
        - containerPort: 50070
          name: http-address
        - containerPort: 9000
          name: fs-default-name
        env:
        - name: DFS_REPLICATION
          value: "{{ dfs_replication }}"
        command:
        - sh
        - -c
        - namenode.sh
        volumeMounts:
        - name: datadir
          mountPath: /data
  volumeClaimTemplates:
  - metadata:
      name: datadir
      {{ pv_annotations }}
         {{ pv_annotations_line }}
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ nn_disk }}
